---
title: How Tiles Work
owner: Services
---

Product tiles make it easy for cloud operators to offer new and upgraded software services to developers in a Pivotal Cloud Foundry (PCF) deployment. [Pivotal Network](https://network.pivotal.io) distributes these tiles as zipped code directories, with filename extension `.pivotal`, that contain or point to all of the software elements that perform the tile's functions.

This topic explains the purpose each functional element of a tile, and how you format and specify it as input to the [Tile Generator](./tile-generator.html) tool that creates `.pivotal` files.

This topic also describes the typical structure of a tile directory, which is useful information for modifying generated tiles or legacy tiles that were created without the Tile Generator.

## <a id='functions'></a>Tile Functions

PCF service tiles perform multiple functions that streamline the use of software services on PCF, including:

* Deploy a [service broker](#broker) that interfaces between the Cloud Controller, PCF's main executive component, and the service.

* [Publish a catalog](#catalog) of available services to the **Services Marketplace**.

* Define an interface for [configuring service properties](#configure) in Ops Manager.

* Generate a [BOSH manifest](#manifest) for deploying instances of the service, populating it with both user-configured and fixed properties.

* Run BOSH [errands](#errands): deploy errands that set PCF up to run the service when an operator first deploys the service, and delete errands that clean up when an operator deletes the service.

* Support one-click installation and [upgrading](#upgrading) from previous versions.

These functions are described in more detail below.

### <a id='broker'></a> Service Broker

Service brokers integrate services with PCF by providing an API for the Cloud Controller to create service instances, bind them to apps, and perform other operations. The [Service Broker API v2.10](http://docs.pivotal.io/pivotalcf/services/api.html) topic specifies requirements for this API.

You can write a service broker in any language, and it can run anywhere, inside your PCF installation or external. See [Example Service Brokers](http://docs.pivotal.io/pivotalcf/services/examples.html) for sample code in Ruby, Java, and Go.

Specify the service broker for a tile in the tile directory's `tile.yml` file, as a [package](#packages) with `type:` set to `app-broker`, `docker-app-broker`, or `external-broker`. The `external-broker` type requires a `uri` value, for the service broker location.

### <a id='catalog'></a> Catalog

Service brokers include [catalog metadata](http://docs.pivotal.io/pivotalcf/services/catalog-metadata.html) that list their service plans. This information publishes to the Services Marketplace that app developers use to browse and select services.

Developers on either PCF or open-source Cloud Foundry see a plain-text version of the Services Marketplace by running `cf marketplace`. But PCF also features a graphical Services Marketplace, and PCF service brokers support this marketplace with additional catalog metadata fields for display names, logo images, and links to more information and documentation.

Define this catalog metadata for your service by writing your service broker to return the API calls listed in the [Catalog Metadata](http://docs.pivotal.io/pivotalcf/services/catalog-metadata.html) topic.

### <a id='configure'></a> Configuration

In the Ops Manager Installation Dashboard, service tiles present a form-based interface that cloud operators use to configure the service.  You define this interface in the `forms:` section of the `tile.yml` configuration file that you pass to the Tile Generator.

`forms` defines the contents and layout of the configuration interface. Each named form element defines a configuration pane accessible under the tile's **Settings** tab. A left-side menu lists all configuration panes and indicates with check marks which ones have been configured. The menu lists service-specific panes, defined by the tile developer, between system-level panes like **Assign AZs and Networks** and **Resource Config** that all PCF products and services use.

![Form Layout](img/form-layout.png)

Each form, or configuration pane, has `label` for the menu text, a `description` to appear up top, and `property_inputs` that define the configuration fields themselves. Construct your `forms` by following the [Product Template Reference](http://docs.pivotal.io/partners/product-template-reference.html) topic and the [Property Blueprint Reference](http://docs.pivotal.io/partners/tiles.html#property-ref) section of the About PCF Tiles topic.

For each property, you can combine specifications for `name`, `type`, `default`, `configurable`, `options`, and `constraints`, under both the [Form Properties](http://docs.pivotal.io/partners/product-template-reference.html#form-properties] and [Property Blueprints](http://docs.pivotal.io/partners/product-template-reference.html#property-blueprints) sections of the topic.

<p class="note"><strong>Note</strong>: In the tile installer <code>.yml</code> that Tile Generator creates, form properties appear in two locations: a <code>form_types</code> section that defines the contents and layout of the configuration interface, and a <code>property_blueprints</code> section that defines the corresponding field value types and constraints.</p>

#### <a id='appearance'></a> Tile Appearance

In the Ops Manager Installation Dashboard, your service tile bears an identifying label, description, and logo icon. Specify these at the top of your `tile.yml` configuration file as `label`, `description`, and `icon_file`. The value of `icon_file` should be the name of a 128×128 pixel PNG image.

### <a id='manifest'></a> BOSH Manifest Generation

TK Unconfigurable properties: tile.yml properties: section (blueprints, specs, etc are automatically generated)

[Double-Paren Expressions](http://docs.pivotal.io/partners/tiles.html#expressions)

Credentials: Automatically generated by bosh where needed

Tiles serve as wrappers for BOSH releases and perform additional functions like managing configuration and upgrades in the Ops Manager Installation Dashboard. To build a tile, you need to know how BOSH releases are structured, and how tiles are constructed to include BOSH releases. If your product has different numbered releases, you can package multiple BOSH releases within a single tile. 

No, neither tile-generator nor the tile itself generates credentials. Any required credentials are declared as type `salted_credentials` by tile-generator, and the actual credentials are generated by bosh. bosh also supplies the required credentials for other tiles/components (such as the Elastic Runtime) to the packages that require them.

### <a id='errands'></a> Errands

Lifecycle errands (for cf packages): generated automatically, custom code can be added in tile.yml

Lifecycle errands (for imported bosh releases): defined in tile.yml

2. For cf-type packages, lifecycle errands are generated automatically. For imported bosh releases, their jobs are defined in tile.yml, and can be labeled as lifecycle errands using `lifecycle: errand` and either `post_deploy: true` or `pre_delete: true`


### <a id='upgrade'></a> Upgrade Rules

Upgrades: generated automatically, custom code can be added in tile.yml
, for use by cloud operators

## <a id='structure'></a>Tile Structure

### <a id='dot-pivotal'></a>Building the .pivotal file

A `.pivotal` file is simply a gzipped tarfile of the tile directory with the `.tgz` extension renamed to `.pivotal`. You can use any zip utility to create a `.pivotal` file. Ensure that the top-level subfolders as seen above in the `example-product` folder remain.

#### Example workflow

<pre class='terminal'>
$ cd example-product
$ zip -r example-product.pivotal metadata/ migrations/ releases/
$ unzip -l example-product.pivotal
Archive:  example-product.pivotal
  Length     Date   Time    Name
 --------    ----   ----    ----
        0  08-09-16 16:10   metadata/
    89458  08-09-16 16:10   metadata/example-product.yml
        0  07-08-16 09:32   migrations/
        0  07-08-16 09:32   migrations/v1/
      423  07-08-16 09:32   migrations/v1/201512301616_convert_14_transmogrifier_rules.js
     1228  07-08-16 09:32   migrations/v1/201512301631_convert_15_16_transmogrifier_rules.js
      582  07-08-16 09:32   migrations/v1/201611060205_example_migration.js
        0  08-09-16 16:11   releases/
        0  07-12-16 17:19   releases/example-release-18.tgz
</pre>

To create a tile, you create a directory following this format, and include BOSH releases that instantiate your service within PCF.


### <a id='file-structure'></a>Typical File Structure

Tile-generator makes a lot of this obsolete. It doesn't really dictate a directory structure, although by convention, your github repo might look like this:

/tile.yml
/src        # source code for all components deployed by the tile
/resources  # other resources, such as icon images and imported docker images or bosh releases
/release    # generated bosh release(s)
/product    # generated tile

Tile generator creates a bosh release for all packages that deploy into cf. additional bosh releases may be added to the tile explicitly (using bosh-release), or implicitly (docker-bosh packages end up in a seperate bosh release, and cause us to pull in a bosh release it depends on).

There are *not* multiple versions inside a tile. Just the latest.


You create a `.pivotal` file from a directory structured like this:

```
.
├── example-product
│   ├── metadata
│   │   └── example-product.yml
│   ├── migrations
│   │   └── v1
│   │       ├── 201512301616_convert_14_transmogrifier_rules.js
│   │       ├── 201512301631_convert_15_16_transmogrifier_rules.js
│   │       └── 201611060205_example_migration.js
│   └── releases
│       └── example-release-18.tgz
```

The three required top-level subdirectories in a `.pivotal` tile directory are:

* `metadata` - high-level information for configuring and publishing your service.
* `migrations` - rules that govern tile upgrades.
* `releases` - the BOSH releases that deploy your service.

### <a id='packages'></a>Packages and Processes

1. In tile yml, you define packages, for example app1, app2, broker1, and each has a type, like app-broker or bosh-release. Each of these corresponds to a long-running process like an application or component, packaged with specifics on how it should run, right?

Correct for most package types, but there are some exceptions. `external-broker` and `blob` don't start any processes, and `bosh-release` and `docker-bosh` typically have many jobs (long-running as well as possibly errands). Which makes for almost more exception than rule, so maybe we shouldn't make that general statement.

2. What are the possible package types— is there a list somewhere? (As a docs person, I really should know this, but couldn’t find through search box…)

The authoritative list is here: https://github.com/cf-platform-eng/tile-generator/blob/master/lib/util.py#L27
- app - will be cf pushed
- docker-app - will be cf pushed (image will not be embedded so requires docker registry access)
- app-broker - will be cf pushed and registered as a broker
- docker-app-broker - will be cf pushed and registered as a broker (image will not be embedded so requires docker registry access)
- external-broker - will be registered as a broker
- buildpack - will be installed with cf create-buildpack
- docker-bosh - can describe a collection of docker images that will be embedded in the tile and run on bosh managed vms
- bosh-release - a pre-existing bosh release that will be wrapped in a tile, requires you to describe all jobs to be run (long-running and errands)

list of package types - package structure is entirely specific to tile generator. We chose the name because initially, all the supported types translated directly to bosh packages. With the introduction of support for pre-existing bosh-release packages, that's no longer true.

4. Under Resource Config, it looks like each package, like “app1” has one or more associated one-time tasks, things like deploy- destroy- register- etc. Are these the lifecycle errands for each?

They are, but this is out-of-date. We have since combined these individual errands into two big ones (deploy-all and delete-all), simply because it takes a lot of time to spin up/down a vm for each errand so for tiles with many packages this is much faster. So now, there will be only two lifecycle errands (if you have cf packages), plus jobs as defined in bosh-releases, plus one for each docker-bosh release vm. I'm attaching a screen shot of what it looks like for a tile that has one of each.

5. Again, from Ops Man and ERT tiles I think of Resource Config as allocating resources for ongoing jobs, like component processes, the Cloud Controller, UAA, etc, rather than one-time tasks like lifecycle errands. But in the screencast, Resource Config shows one-time tasks like `delete-app-broker1`.  Does the Resource Config form for a Service tile just allocate resources for tasks (lifecycle errands?) or does it also configure resources for always-running components, like the Concourse ATC?

Resource Config includes both. It allows you to change the configuration for any vm that bosh will start, whether it's for long-running jobs or for one-time errands. For errand vms, it does not allow you to change the number of instances and specify persistent disk. But they are there, even for Elastic Runtime (Push Apps Manager, Run Smoke Tests, etc.).

![Service Tile Resource Config](img/service-resource-config.png)

### <a id='template-ref'></a>Product Template Reference

The product template includes the following sections:

* Metadata: high level information about your tile
* Dependencies: how to specify product dependencies
* Property Blueprints: the building blocks of representing values
* Form Types: exposing property blueprints into generated forms
* Jobs



