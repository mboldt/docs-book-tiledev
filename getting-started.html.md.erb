---
title: Why Make a Tile
owner: Services
---

As an Independent Software Vendor (ISV), you are likely to find more and more
Pivotal Cloud Foundry (PCF) users among your customers. Many of these will be
asking you to integrate your software with PCF to enable use of your software
with the applications they are developing on PCF.

Pivotal is very supportive of these types of integrations and is committed to
making this process as easy as possible. This site provides a *technical*
overview on how to integrate your software with PCF. You are welcome to
start this process on your own, or [contact us](contacts.html)
to ask for our support and/or publish your integration in our
[marketplace](http://network.pivotal.io).

There are a lot of things you will have to learn and do to complete an
integration with Cloud Foundry. This page attempts to lay out a typical
progression of an integration with PCF.

## Step 0. Understand the concepts

There are many ways to integrate products with Cloud Foundry.
The right one for each product depends on what the product does, and how
customer applications consume it. To determine the best way to integrate your
product, you'll need a good understanding of
[Cloud Foundry concepts](cf-concepts.html)
like applications, containers, services, brokers, and buildpacks.

## Step 1. Design the integration

With sufficient understanding of both your product, and Cloud Foundry concepts,
you are in a position to decide what the integration looks like. Integration
points might include:

- [Service Brokers](cf-concepts.html#service-brokers)
- [Managed Services](stages.html#managed)
- [Buildpacks](cf-concepts.html#buildpacks)
- [Embedded Agents](cf-concepts.html#agents)
- [Nozzles](cf-concepts.html#nozzles)
- Or any combination of the above

If you are not intimately familiar with Cloud Foundry, this is one of the
areas where we can help. We like to do scoping meetings with you, where
we pair your understanding of your products, with our understanding of
Cloud Foundry, to map out the best possible integration path.

## Step 2. Learn how to build

Depending on the selected type of integration, you will need to learn
how to build one or more of:

- [Service brokers](service-brokers.html)
- [Managed services](managed-services.html)
- [Dynamic services](dynamic-services.html)
- [Buildpacks](buildpacks.html)
- [Embedded agents](embedded-agents.html)
- [Nozzles](nozzles.html)

Self-learning is definitely possible. If you are interested in more
organized learning, Pivotal provides many different classes and labs for
partners and customers. [Contact us](contacts.html)
if your are interested in learning more about this.

## Step 3. Set up a test environment

Once you move into development, you will need access to a PCF environment.
Partners who participate in our program have access to a number of shared
environments that are operated and managed by Pivotal. If you are not (yet)
in our program, need a dedicated environment, or want to be able to work
offline, you can set up a PCF environment on:

- [Developer desktop/laptop](./environments.html#pcfdev)
- [Supported public or private infrastructure (IaaS)](./environments.html#pws)

You will then also need to learn to operate and upgrade PCF by yourself:

- [Setting Up PCF](./environments.html#pcf)

## Step 4. Validate the design

Pivotal is a strong believer in lean and agile development and the notion
of delivering a Minimal Viable Product (MVP) to our customers as quickly
as possible. So we always look for [staged approaches](stages.html) to
the development of the integration, and only plan the upcoming stage in
great detail.

In most cases, there is a very rapid way to do a proof-of-concept of the
proposed integration. For instance, if you are building a service, you
can often emulate the availability of a brokered, managed, or dynamic
service by setting up a [user-provided service](stages.html#ups)
for an existing instance of your service. That will let you validate
the integration design before you make a large development investment,
and it will let real consumers weigh in on development priorities.

A critical component to this step is the development of consuming
applications. Those can be real customer applications, or test applications
that are deployed to PCF.

- [Developing applications](cf-concepts.html#applications)
- [Binding services](cf-concepts.html#services)

## Step 5. Develop your tile

Once the design is established and validated, and the first [stage](stages.html)
has been defined, you would start actual development of your tile.

- [Develop and test the individual components](development.html#components)
- [Generate your tile](development.html#tile-generator)
- [Test the deploy and delete errands](development.html#test-errands)
- [Deploy and test your tile](development.html#deploy)

## Step 6. Publish your tile

- [Complete the documentation](tile-documentation.html)
- [Work with Pivotal to publish your tile](contacts.html)

## Step 7. Maintain your tile

- [Set up a Concourse Server](concourse.html#server)
- [Set up a Concourse Pipeline](concourse.html#pipeline)
- [Create a target PCF pool](concourse.html#pool)

- [Upgrading tiles](tile-generator.html#upgrades)
